@page "/Invoice"

@using CititorServer.Data.Model
@using CititorServer.Data.Service

@inject IDesignService IDesignService
@inject IListdeService IListdeService
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime


<h1>Facturación</h1>

<div class="container ">
  <div class="row">
  <div class="d-flex mr-5 m-auto col-lg-12 col-sm-12">

    <form class="row g-3">
      <div class="col-md-6">
        <label for="inputEmail4" class="form-label">Email</label>
        <input type="email" class="form-control" id="inputEmail4">
      </div>
      <div class="col-md-6">
        <label for="inputFact" class="form-label">Numero de Compra</label>
        <input type="text" disabled class="form-control" id="inputFact">
      </div>
      <div class="col-md-6">
        <label for="inputName" class="form-label">Nombre</label>
        <input type="text" class="form-control" id="inputName" placeholder="Nombre">
      </div>
      <div class="col-md-6">
        <label for="inputLastName" class="form-label">Apellido</label>
        <input type="text" class="form-control" id="inputLastName" placeholder="Apellido">
      </div>
      <div class="col-12">
        <label for="inputAddress" class="form-label">Dirección</label>
        <input type="text" class="form-control" id="inputAddress" placeholder="Dirección">
      </div>
      <div class="col-md-6">
        <label for="inputCity" class="form-label">City</label>
        <input type="text" class="form-control" id="inputCity">
      </div>
      <div class="col-md-4">
        <label for="inputState" class="form-label">State</label><br>
        <select id="inputState" class="form-select">
          <option selected>Choose...</option>
          <option>...</option>
        </select>
      </div>
      <div class="col-md-2">
        <label for="inputZip" class="form-label">Zip</label>
        <input type="text" class="form-control" id="inputZip">
      </div>
      <div class="col-12">
        <div class="form-check">
          <input class="form-check-input" type="checkbox" id="gridCheck">
          <label class="form-check-label" for="gridCheck">
            Check me out
          </label>
        </div>
      </div>

    </form>


  </div>
</div>
<br>
<br>
<br>
  <h4>Resumen de la Compra</h4>

  <div class="table-responsive m-auto col-lg-12 col-sm-12">
    <table class="table table-striped table-bordered mw-75 m-auto" id="example">
      <thead>
        <tr>
          <th>Código</th>
          <th>Descripción</th>


          <th>Cantidad</th>

          <th>Valor</th>

        </tr>
      </thead>
      <tbody>
        @{
          int i = 0;
          var myQtArticles = qtArticleListDe.ToList();
        }
        @foreach (var articleFor in articlesListDe)
        {
          <tr>
            <td>@articleFor.idArticulo</td>
            <td>@articleFor.descripcionArticulo</td>

            <td>@myQtArticles[@i].cantArticulo</td>
            <td>@articleFor.valor</td>


          </tr>

          i = i + 1;

        }
        <tr>
          <td></td>
          <td></td>

          <td>Subotal</td>
          <td> @subtotal </td>


        </tr>


      </tbody>

    </table>
  </div>
  <br>
  <br>
  <br>
  
</div>



@code {
  
  IEnumerable<Article> articlesListDe;
  IEnumerable<Listde> qtArticleListDe;

  double subtotal = 0;
  protected override async Task OnInitializedAsync()
  {

    articlesListDe = await IListdeService.AllArticleListDe();
    qtArticleListDe = await IListdeService.AllListdeGet();

    calculateSubtotal();

  }
  void calculateSubtotal(){
    if(articlesListDe.Count() ==qtArticleListDe.Count()  && qtArticleListDe.Count()!= 0 && articlesListDe.Count() != 0){
      int i=0;
      var myQtArticles = qtArticleListDe.ToList();
      foreach(var articleFor in articlesListDe){
          if(articleFor.idArticulo == myQtArticles[i].idArticulo){
            Console.WriteLine((articleFor.valor*myQtArticles[i].cantArticulo));
            subtotal = subtotal + (articleFor.valor*myQtArticles[i].cantArticulo);
          }
    
          i++;
      }
    }
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#example");
    }
  }



  void Cancel()
  {
    NavigationManager.NavigateTo("/");
  }
}