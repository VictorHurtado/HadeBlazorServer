@page "/Invoice"

@using CititorServer.Data.Model
@using CititorServer.Data.Service

@inject IDesignService IDesignService
@inject IListdeService IListdeService
@inject IBonoService IBonoService
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime


<h1>Facturación</h1>

<div class="container ">
  <div class="row">
  <div class="d-flex mr-5 m-auto col-lg-12 col-sm-12">

    <form class="row g-3">
      <div class="col-md-6">
        <label for="inputEmail4" class="form-label">Email</label>
        <input type="email" class="form-control" id="inputEmail4">
      </div>
      <div class="col-md-6">
        <label for="inputFact" class="form-label">Numero de Compra</label>
        <input type="text" disabled class="form-control" id="inputFact">
      </div>
      <div class="col-md-6">
        <label for="inputName" class="form-label">Nombre</label>
        <input type="text" class="form-control" id="inputName" placeholder="Nombre">
      </div>
      <div class="col-md-6">
        <label for="inputLastName" class="form-label">Apellido</label>
        <input type="text" class="form-control" id="inputLastName" placeholder="Apellido">
      </div>
      <div class="col-12">
        <label for="inputAddress" class="form-label">Dirección</label>
        <input type="text" class="form-control" id="inputAddress" placeholder="Dirección">
      </div>
      <div class="col-md-6">
        <label for="inputCity" class="form-label">City</label>
        <input type="text" class="form-control" id="inputCity">
      </div>
      <div class="col-md-4">
        <label for="inputState" class="form-label">State</label><br>
        <select id="inputState" class="form-select">
          <option selected>Choose...</option>
          <option>...</option>
        </select>
      </div>
      <div class="col-md-2">
        <label for="inputZip" class="form-label">Zip</label>
        <input type="text" class="form-control" id="inputZip">
      </div>
      <div class="col-12">
        <div class="form-check">
          <input class="form-check-input" type="checkbox" id="gridCheck">
          <label class="form-check-label" for="gridCheck">
            Check me out
          </label>
        </div>
      </div>

    </form>


  </div>
</div>
<br>
<br>
<br>
  <h4>Resumen de la Compra</h4>

  <div class="table-responsive m-auto col-lg-12 col-sm-12">
    <table class="table table-striped table-bordered mw-75 m-auto" id="example">
      <thead>
        <tr>
          <th>Código</th>
          <th>Descripción</th>


          <th>Cantidad</th>

          <th>Valor</th>

        </tr>
      </thead>
      <tbody>
        @{
          int i = 0;
          var myQtArticles = qtArticleListDe.ToList();
        }
        @foreach (var articleFor in articlesListDe)
        {
          <tr>
            <td>@articleFor.idArticulo</td>
            <td>@articleFor.descripcionArticulo</td>

            <td>@myQtArticles[@i].cantArticulo</td>
            <td>@articleFor.valor</td>


          </tr>

          i = i + 1;

        }
        <tr>
          <td></td>
          <td></td>

          <td><strong>Subotal</strong> </td>
          <td> @subtotal </td>


        </tr>
        <tr>
          <td></td>
          <td></td>

          <td> <strong>  Descuento</strong></td>
          <td>@discount </td>


        </tr>
          <tr>
          <td></td>
          <td></td>

          <td> <strong>  Total</strong></td>
          <td>@total </td>


        </tr>


      </tbody>

    </table>
  </div>
  <br>
  <br>
  <br>
    <h4>Sección de Cupones</h4>
  <div class="row py-5">
    
    
      <form class="column gy-2 gx-3 align-items-center">
        
            @for(int j=0; j<cont;j++){
              
            <div class="col-auto">
              
              <label class="visually-hidden" for="autoSizingInput">Código de Cupón @j</label><br>
              <div class="row">
                
              @if(j == cont-1  && bonos.Count()==0 ){
                <input type="text"  class="form-control col-8"  value="0" @onchange="(ChangeEventArgs __e) =>addBonoInBonos(__e)" id="autoSizingInput" placeholder="Jane Doe">
              }else if(j == cont-1  && bonos.Count()!=0 ) {
                 String value=  bonos[bonos.Count()-1].co_alpha;
                <input type="text"  class="form-control col-8" @onchange="(ChangeEventArgs __e) =>addBonoInBonos(__e)" id="autoSizingInput" >
              
              }else{
                String value=  bonos[j].co_alpha;
                <input type="text"  class="form-control col-8"  disabled id="autoSizingInput" placeholder=@value>
              }
              <div class="d-flex justify-content-center col-2 px-0 py-0" style="height: calc(1.5em + .75rem + 2px) !important;" >
                
                  
                  @if(bonos.Count()>0 && bonos.Count()>j){
                    if(bonos[j].porcentaje>0 && bonos[j].porcentaje<55 ){
                      <a class="btn btn-warning btn-lg btn-block px-0" style="color:white; font-size: 0.8rem; "><b> @bonos[j].porcentaje %</b> </a>
                    }else if(bonos[j].porcentaje>=56){
                      <a class="btn btn-success btn-lg btn-block px-0" style="color:white; font-size: 0.8rem; "><b> @bonos[j].porcentaje %</b> </a>
                    }
                  }else{
                    <a class="btn btn-danger btn-lg btn-block px-0" style="color:white; font-size: 0.8rem; "><b>0%</b> </a>
              
                   }
                  
                  
                  
              </div>
              </div>
            </div> 
            
            
             <br>
          } 
        
          
        <br>
        <div class="row d-flex justify-content-between" >
            <div class="col-auto d-flex justify-content-center col-2">
            <a class="btn btn-danger  btn-lg " style="color:white;" @onclick="()=>removeNewInput()">-</a>
          </div>
           <div class="col-auto d-flex justify-content-center col-2" >
            <a class="btn btn-success  btn-lg " style="color:white;" @onclick="()=>addNewInput()">+</a>
          </div>
        
          <div class="col-auto d-flex justify-content-center col-8 p-0" >
            <a class="btn btn-primary btn-lg btn-block" @onclick="()=>calculateBonoPercentage()" style="color:white;" >Aplicar</a>
          </div>
        </div>


      </form>
     
    

  </div>
</div>



@code {
  
  IEnumerable<Article> articlesListDe;
  IEnumerable<Listde> qtArticleListDe;

  List<Bono> bonos = new List<Bono>();
  
  int cont=1;
  double subtotal = 0;

  double percent= 0;
  double discount =0;
  double MAXOFPERCENT =56;
  double total = 0;
  protected override async Task OnInitializedAsync()
  {

    articlesListDe = await IListdeService.AllArticleListDe();
    qtArticleListDe = await IListdeService.AllListdeGet();

    calculateSubtotal();
    calculateTotal();

  }
  void addNewInput(){
    cont++;
  }
  void removeNewInput(){
    bonos.RemoveAt(bonos.Count()-1);
     printAllBonos();
    cont--;
  }
  void calculateSubtotal(){
    if(articlesListDe.Count() ==qtArticleListDe.Count()  && qtArticleListDe.Count()!= 0 && articlesListDe.Count() != 0){
      int i=0;
      var myQtArticles = qtArticleListDe.ToList();
      foreach(var articleFor in articlesListDe){
          if(articleFor.idArticulo == myQtArticles[i].idArticulo){
    
            subtotal = subtotal + (articleFor.valor*myQtArticles[i].cantArticulo);
          }
    
          i++;
      }
    }
  }

  void calculateTotal(){
    total=0;
    total = Math.Round(subtotal -discount,2);
  }
  void calculateBonoPercentage(){

    discount=0;
      foreach(var bono in bonos){
        percent = percent + (bono.porcentaje);
         if(percent<=MAXOFPERCENT){
           Console.WriteLine(percent);
           
           discount = discount + ((bono.porcentaje/100.0) * subtotal);

           discount= Math.Round(discount,2);
         }else{
           Console.WriteLine("Excediste el porcentaje del bono");
         }
      }
      calculateTotal();
  }

  public async void addBonoInBonos(Microsoft.AspNetCore.Components.ChangeEventArgs args){

    Bono newBono= new Bono();
    
    try{
      newBono = await IBonoService.bonoGet((string)args.Value);
      
      if(noDuplicateBono(newBono) != true && bonos.Count() != cont && newBono.idBono !=0 ){ 
        bonos.Add(newBono);
      }
      
    }catch(Exception e){
      Console.WriteLine("Algo salio mal");
     }
  
      printAllBonos();
  }


  void printAllBonos(){
    Console.WriteLine("-------------------------");
    foreach(var bono in bonos){
      Console.WriteLine("bono: "+ bono.co_alpha + " porcentaje:"+ bono.porcentaje);
    }
  }
  public bool noDuplicateBono(Bono newBono){
      foreach(var bono in bonos){
        if(bono.idBono == newBono.idBono){
          return true;
        }
      }
      return false;
  }


  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#example");
    }
  }



  void Cancel()
  {
    NavigationManager.NavigateTo("/");
  }
}